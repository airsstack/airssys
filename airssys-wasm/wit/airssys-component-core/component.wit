package airssys:component-core@1.0.0;

/// Component lifecycle interface - universal contract for all components
interface component-lifecycle {
    use types.{
        component-config, 
        component-error, 
        execution-context, 
        execution-error, 
        messaging-error, 
        component-metadata, 
        health-status, 
        component-id,
        request-id
    };
    
    /// Initialize component with configuration
    init: func(config: component-config) -> result<_, component-error>;
    
    /// Handle external RPC requests
    execute: func(
        operation: list<u8>,
        context: execution-context
    ) -> result<list<u8>, execution-error>;
    
    /// Handle internal component messages
    handle-message: func(
        sender: component-id,
        message: list<u8>
    ) -> result<_, messaging-error>;
    
    /// Handle callback responses from request-response operations
    handle-callback: func(
        request-id: request-id,
        response: result<list<u8>, string>
    ) -> result<_, messaging-error>;
    
    /// Component metadata and capabilities
    metadata: func() -> component-metadata;
    
    /// Health check for monitoring
    health: func() -> health-status;
    
    /// Graceful shutdown and cleanup
    shutdown: func() -> result<_, component-error>;
}

/// Component world - what components import/export
world component {
    export component-lifecycle;
    import airssys:host-core/host-services;
}
