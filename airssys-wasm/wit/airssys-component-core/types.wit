package airssys:component-core@1.0.0;

/// Core types interface - common types, errors, and data structures
interface types {
    /// Component unique identifier
    type component-id = string;

    /// Request identifier for tracking async operations
    type request-id = string;

    /// Common error types for component operations
    variant component-error {
        initialization-failed(string),
        invalid-configuration(string),
        resource-exhausted(string),
        internal-error(string),
    }

    variant execution-error {
        invalid-input(string),
        timeout-exceeded,
        capability-denied(string),
        internal-error(string),
    }

    variant messaging-error {
        component-not-found(component-id),
        message-too-large,
        timeout-exceeded,
        delivery-failed(string),
    }

    variant file-error {
        not-found(string),
        permission-denied(string),
        io-error(string),
    }

    variant http-error {
        invalid-url(string),
        connection-failed(string),
        timeout-exceeded,
        permission-denied(string),
    }

    /// Execution context for operations
    record execution-context {
        request-id: request-id,
        timeout-ms: u64,
    }

    /// Component metadata returned by metadata() function
    record component-metadata {
        name: string,
        version: string,
        description: string,
        author: string,
        license: string,
        requested-permissions: requested-permissions,
        supported-operations: list<string>,
        language: string,
        memory-requirements: memory-requirements,
        timeout-ms: option<u64>,
        stateful: bool,
        api-version: string,
        homepage: option<string>,
        repository: option<string>,
        tags: list<string>,
    }

    record memory-requirements {
        min-memory-bytes: u64,
        max-memory-bytes: u64,
        preferred-memory-bytes: u64,
    }

    /// Health status for monitoring
    record health-status {
        healthy: bool,
        reason: option<string>,
    }

    /// Logging levels
    enum log-level {
        trace,
        debug,
        info,
        warn,
        error,
    }

    /// Component configuration during initialization
    record component-config {
        env: list<tuple<string, string>>,
        config-data: option<list<u8>>,
    }

    /// Requested permissions for host capabilities
    record requested-permissions {
        filesystem: list<filesystem-permission>,
        network: list<network-permission>,
        storage: list<storage-permission>,
    }

    /// Filesystem permission declaration
    record filesystem-permission {
        action: filesystem-action,
        path-pattern: string,
    }

    enum filesystem-action {
        read,
        write,
        delete,
        list-dir,
    }

    /// Network permission declaration
    record network-permission {
        action: network-action,
        host-pattern: string,
        port: option<u16>,
    }

    enum network-action {
        outbound,
        inbound,
    }

    /// Storage permission declaration
    record storage-permission {
        namespace-pattern: string,
        action: storage-action,
    }

    enum storage-action {
        read,
        write,
        delete,
        list-keys,
    }
}
