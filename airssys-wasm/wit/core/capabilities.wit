package airssys:core@1.0.0;

// ═════════════════════════════════════════════════════════════════════════════
// LAYER 1: CAPABILITIES AND PERMISSIONS INTERFACE
// ═════════════════════════════════════════════════════════════════════════════
//
// This interface defines the capability-based security model for AirsSys WASM
// components. It provides fine-grained permission types for filesystem, network,
// and process operations.
//
// Note: Foundation types are imported from the types interface using WIT `use`
// statements. This allows type reuse across interfaces within the same package.

interface capabilities {
    use types.{component-id};
    
    // ─────────────────────────────────────────────────────────────────────────
    // Filesystem Permissions
    // ─────────────────────────────────────────────────────────────────────────
    
    // ─────────────────────────────────────────────────────────────────────────
    // Filesystem Permissions
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Filesystem operation permission with action and path pattern
    record filesystem-permission {
        action: filesystem-action,
        path-pattern: string,
    }
    
    /// Filesystem operation types
    enum filesystem-action {
        read,
        write,
        delete,
        list-dir,
    }
    
    // ─────────────────────────────────────────────────────────────────────────
    // Network Permissions
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Network operation permission with action, host pattern, and optional port
    record network-permission {
        action: network-action,
        host-pattern: string,
        port: option<u16>,
    }
    
    /// Network operation types (outbound vs inbound)
    enum network-action {
        outbound,
        inbound,
    }
    
    // ─────────────────────────────────────────────────────────────────────────
    // Process Permissions
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Process operation permission with action and command pattern
    record process-permission {
        action: process-action,
        command-pattern: string,
    }
    
    /// Process operation types
    enum process-action {
        spawn,
        kill,
        signal,
    }
    
    // ─────────────────────────────────────────────────────────────────────────
    // Permission Aggregation
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Complete set of requested permissions for a component
    record requested-permissions {
        filesystem: list<filesystem-permission>,
        network: list<network-permission>,
        process: list<process-permission>,
    }
    
    /// Result of permission check operation
    variant permission-result {
        granted,
        denied(string),
    }
}
