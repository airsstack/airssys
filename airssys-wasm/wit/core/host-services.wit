package airssys:core@1.0.0;

// ═════════════════════════════════════════════════════════════════════════════
// LAYER 3: HOST SERVICES INTERFACE
// ═════════════════════════════════════════════════════════════════════════════
//
// This interface defines the host-provided services available to components,
// including logging, inter-component messaging, timing, and component introspection.
//
// Note: Foundation types are imported from the types interface using WIT `use`
// statements. This allows type reuse across interfaces within the same package.

interface host-services {
    use types.{component-id, request-id, component-error, log-level, timestamp};
    
    // ─────────────────────────────────────────────────────────────────────────
    // Messaging Types
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Inter-component messaging errors
    variant messaging-error {
        component-not-found(string),
        send-failed(string),
        timeout(string),
        invalid-message(string),
    }
    
    /// Component metadata for introspection queries
    record component-metadata {
        name: string,
        version: string,
        description: string,
        status: string,
    }
    
    // ─────────────────────────────────────────────────────────────────────────
    // Logging
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Log a message with severity level and optional context
    log: func(
        level: log-level,
        message: string,
        context: option<list<tuple<string, string>>>
    );
    
    // ─────────────────────────────────────────────────────────────────────────
    // Messaging
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Send fire-and-forget message to another component
    send-message: func(
        target: component-id,
        message: list<u8>
    ) -> result<_, messaging-error>;
    
    /// Send request message and get request ID for callback correlation
    send-request: func(
        target: component-id,
        request: list<u8>,
        timeout-ms: u64
    ) -> result<request-id, messaging-error>;
    
    /// Cancel a pending request by its ID
    cancel-request: func(
        request-id: request-id
    ) -> result<_, messaging-error>;
    
    // ─────────────────────────────────────────────────────────────────────────
    // Timing
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Get current time in milliseconds since Unix epoch
    current-time-millis: func() -> u64;
    
    /// Sleep for specified duration in milliseconds
    sleep-millis: func(duration-ms: u64);
    
    // ─────────────────────────────────────────────────────────────────────────
    // Introspection
    // ─────────────────────────────────────────────────────────────────────────
    
    /// List all currently loaded component IDs
    list-components: func() -> list<component-id>;
    
    /// Get metadata for a specific component
    get-component-metadata: func(id: component-id) -> result<component-metadata, component-error>;
}
