package airssys:core@1.0.0;

// ═════════════════════════════════════════════════════════════════════════════
// LAYER 0: FOUNDATION TYPES INTERFACE
// ═════════════════════════════════════════════════════════════════════════════
//
// This interface defines the core foundation types used throughout the AirsSys
// WASM framework. All other interfaces depend on and duplicate these types for
// interface isolation (Component Model v0.1 limitation).
//
// Note: Component Model v0.1 (wasm-tools 1.240.0) does not support cross-interface
// type references. Therefore, types defined here are re-exported/duplicated in
// dependent interfaces. See DEBT-WASM-003 for migration strategy.

interface types {
    // ─────────────────────────────────────────────────────────────────────────
    // Component Identity
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Component unique identifier with namespace, name, and version
    record component-id {
        namespace: string,
        name: string,
        version: string,
    }
    
    /// Request correlation identifier for async operations
    type request-id = string;
    
    // ─────────────────────────────────────────────────────────────────────────
    // Timestamps
    // ─────────────────────────────────────────────────────────────────────────
    
    /// High-precision timestamp with seconds and nanoseconds
    record timestamp {
        seconds: u64,
        nanoseconds: u32,
    }
    
    // ─────────────────────────────────────────────────────────────────────────
    // Error Types
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Component lifecycle and initialization errors
    variant component-error {
        initialization-failed(string),
        configuration-invalid(string),
        resource-exhausted(string),
        internal-error(string),
    }
    
    /// Execution operation errors
    variant execution-error {
        invalid-input(string),
        processing-failed(string),
        timeout(string),
        resource-limit-exceeded(string),
    }
    
    /// Filesystem operation errors
    variant file-error {
        not-found(string),
        permission-denied(string),
        already-exists(string),
        io-error(string),
    }
    
    /// Network operation errors
    variant network-error {
        connection-failed(string),
        timeout(string),
        invalid-url(string),
        protocol-error(string),
    }
    
    /// Process operation errors
    variant process-error {
        spawn-failed(string),
        not-found(string),
        permission-denied(string),
        timeout(string),
    }
    
    // ─────────────────────────────────────────────────────────────────────────
    // Status Types
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Component health status enumeration
    enum health-status {
        healthy,
        degraded,
        unhealthy,
        unknown,
    }
    
    /// Logging severity levels for structured logging
    enum log-level {
        trace,
        debug,
        info,
        warn,
        error,
    }
    
    /// Execution result status tracking
    variant execution-status {
        success,
        failed,
        timeout,
        cancelled,
    }
}
