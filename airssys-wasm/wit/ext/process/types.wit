package airssys:ext-process@1.0.0;

// ═════════════════════════════════════════════════════════════════════════════
// PROCESS EXTENSION: FOUNDATION TYPES INTERFACE
// ═════════════════════════════════════════════════════════════════════════════
//
// This interface defines the core types for process operations in AirsSys WASM.
// It serves as the single source of truth for error types, process status types,
// and process metadata used across lifecycle and signals interfaces.
//
// Note: Component Model v0.1 supports cross-interface type reuse through `use`
// statements within the same package. This enables type sharing across the
// lifecycle.wit and signals.wit interfaces.

interface types {
    // ─────────────────────────────────────────────────────────────────────────
    // Process Operation Errors
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Comprehensive process operation error types
    variant process-error {
        /// Process spawn failed
        spawn-failed(string),
        /// Process not found
        not-found(string),
        /// Permission denied for operation
        permission-denied(string),
        /// Operation timed out
        timeout(string),
        /// Invalid argument or parameter
        invalid-argument(string),
        /// Resource exhausted (too many processes, memory, etc.)
        resource-exhausted(string),
        /// I/O operation failed
        io-error(string),
        /// Invalid process state for operation
        invalid-state(string),
        /// Process already terminated
        already-terminated(string),
        /// Child process zombie state
        child-zombie(string),
        /// Signal not supported
        signal-not-supported(string),
        /// Exec format error
        exec-format-error(string),
        /// Too many nested processes
        too-many-processes(string),
    }
    
    // ─────────────────────────────────────────────────────────────────────────
    // Process Identity Types
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Process identifier (PID)
    type process-id = u32;
    
    /// Parent process identifier (PPID)
    type parent-process-id = u32;
    
    // ─────────────────────────────────────────────────────────────────────────
    // Process Status Types
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Process state enumeration
    enum process-state {
        /// Process is running
        running,
        /// Process is stopped/suspended
        stopped,
        /// Process is zombie (terminated but not reaped)
        zombie,
        /// Process has terminated normally
        terminated,
        /// Process terminated with error
        error,
    }
    
    /// Process status record with detailed information
    record process-status {
        /// Process identifier
        pid: process-id,
        /// Parent process identifier
        ppid: parent-process-id,
        /// Current process state
        state: process-state,
        /// Exit code (if terminated)
        exit-code: option<s32>,
        /// Process start time (seconds since Unix epoch)
        start-time: u64,
        /// CPU time used by process (milliseconds)
        cpu-time-ms: u64,
        /// Memory used by process (bytes)
        memory-bytes: u64,
        /// Number of threads
        thread-count: u32,
    }
    
    // ─────────────────────────────────────────────────────────────────────────
    // Process Spawning Parameters
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Process spawning configuration
    record spawn-options {
        /// Command to execute
        command: string,
        /// Command arguments
        arguments: list<string>,
        /// Environment variables (format: "KEY=VALUE")
        environment: list<string>,
        /// Working directory for process
        working-directory: option<string>,
        /// Inherit parent's environment
        inherit-environment: bool,
        /// Capture stdout
        capture-stdout: bool,
        /// Capture stderr
        capture-stderr: bool,
        /// Inherit stdin from parent
        inherit-stdin: bool,
    }
    
    /// Result from spawning a process
    record spawn-result {
        /// Process identifier of spawned process
        pid: process-id,
        /// Start time in Unix epoch seconds
        start-time: u64,
    }
    
    // ─────────────────────────────────────────────────────────────────────────
    // Process Termination Types
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Exit status of terminated process
    record exit-status {
        /// Exit code (0 = success, non-zero = error)
        code: s32,
        /// Process terminated by signal
        terminated-by-signal: bool,
        /// Signal number if terminated by signal
        signal-number: option<u32>,
    }
    
    /// Wait result containing exit status and resource usage
    record wait-result {
        /// Process identifier that terminated
        pid: process-id,
        /// Exit status information
        exit-status: exit-status,
        /// CPU time used (milliseconds)
        cpu-time-ms: u64,
        /// Peak memory usage (bytes)
        peak-memory-bytes: u64,
    }
    
    // ─────────────────────────────────────────────────────────────────────────
    // Signal Types
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Unix signal enumeration
    enum signal {
        /// Terminate signal (graceful shutdown)
        term,
        /// Kill signal (force terminate)
        kill,
        /// Interrupt signal (Ctrl+C)
        int,
        /// Quit signal
        quit,
        /// Stop signal (suspend process)
        stop,
        /// Continue signal (resume suspended)
        cont,
        /// Hangup signal
        hup,
        /// User signal 1
        usr1,
        /// User signal 2
        usr2,
    }
    
    // ─────────────────────────────────────────────────────────────────────────
    // Resource Limit Types
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Resource limits for process
    record resource-limits {
        /// Maximum virtual memory in bytes (0 = unlimited)
        max-memory: u64,
        /// Maximum CPU time in seconds (0 = unlimited)
        max-cpu-time: u32,
        /// Maximum file size in bytes (0 = unlimited)
        max-file-size: u64,
        /// Maximum number of open files
        max-open-files: u32,
        /// Maximum number of processes
        max-processes: u32,
    }
}
