package airssys:ext-process@1.0.0;

// ═════════════════════════════════════════════════════════════════════════════
// PROCESS EXTENSION: SIGNAL HANDLING INTERFACE
// ═════════════════════════════════════════════════════════════════════════════
//
// This interface defines signal handling operations for processes: signal sending,
// signal handling setup, and signal utilities. It uses the `use` statement to
// import types from the local types interface, enabling clean type management.

interface signals {
    use types.{
        process-error,
        process-id,
        signal,
    };
    
    // ─────────────────────────────────────────────────────────────────────────
    // Signal Sending
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Send signal to a process
    /// 
    /// Requires: process:signal capability
    /// Arguments:
    ///   - pid: Process ID to send signal to
    ///   - signal: Signal to send
    /// Returns: success or error
    send-signal: func(pid: process-id, signal: signal) -> result<_, process-error>;
    
    /// Send SIGTERM to gracefully terminate process
    /// 
    /// Requires: process:kill capability
    /// Arguments:
    ///   - pid: Process ID
    /// Returns: success or error
    send-term: func(pid: process-id) -> result<_, process-error>;
    
    /// Send SIGKILL to forcefully terminate process
    /// 
    /// Requires: process:kill capability
    /// Arguments:
    ///   - pid: Process ID
    /// Returns: success or error
    send-kill: func(pid: process-id) -> result<_, process-error>;
    
    /// Send SIGINT to interrupt process (Ctrl+C)
    /// 
    /// Requires: process:signal capability
    /// Arguments:
    ///   - pid: Process ID
    /// Returns: success or error
    send-int: func(pid: process-id) -> result<_, process-error>;
    
    /// Send SIGSTOP to suspend process
    /// 
    /// Requires: process:signal capability
    /// Arguments:
    ///   - pid: Process ID
    /// Returns: success or error
    send-stop: func(pid: process-id) -> result<_, process-error>;
    
    /// Send SIGCONT to resume suspended process
    /// 
    /// Requires: process:signal capability
    /// Arguments:
    ///   - pid: Process ID
    /// Returns: success or error
    send-cont: func(pid: process-id) -> result<_, process-error>;
    
    /// Send SIGHUP to process
    /// 
    /// Requires: process:signal capability
    /// Arguments:
    ///   - pid: Process ID
    /// Returns: success or error
    send-hup: func(pid: process-id) -> result<_, process-error>;
    
    /// Send custom signal number to process
    /// 
    /// Requires: process:signal capability
    /// Arguments:
    ///   - pid: Process ID
    ///   - signal-number: Signal number to send
    /// Returns: success or error
    send-raw-signal: func(pid: process-id, signal-number: u32) -> result<_, process-error>;
    
    // ─────────────────────────────────────────────────────────────────────────
    // Signal Handling Setup
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Register callback for process termination signal
    /// 
    /// Arguments:
    ///   - pid: Process ID to monitor
    /// Returns: handler ID for managing the callback or error
    /// Note: Implementation specific - returns opaque handler ID
    on-terminate: func(pid: process-id) -> result<u64, process-error>;
    
    /// Register callback for process status change
    /// 
    /// Arguments:
    ///   - pid: Process ID to monitor
    /// Returns: handler ID or error
    on-status-change: func(pid: process-id) -> result<u64, process-error>;
    
    /// Unregister signal callback
    /// 
    /// Arguments:
    ///   - handler-id: Handler ID from registration function
    /// Returns: success or error
    unregister-handler: func(handler-id: u64) -> result<_, process-error>;
    
    // ─────────────────────────────────────────────────────────────────────────
    // Signal Group Operations
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Send signal to process group
    /// 
    /// Requires: process:signal capability
    /// Arguments:
    ///   - process-group-id: Process group ID (-1 = all)
    ///   - signal: Signal to send
    /// Returns: success or error
    send-signal-group: func(process-group-id: s32, signal: signal) -> result<_, process-error>;
    
    /// Get process group ID
    /// 
    /// Arguments:
    ///   - pid: Process ID
    /// Returns: process group ID or error
    get-process-group: func(pid: process-id) -> result<s32, process-error>;
    
    /// Set process group
    /// 
    /// Requires: process:signal capability
    /// Arguments:
    ///   - pid: Process ID
    ///   - pgid: Process group ID to set
    /// Returns: success or error
    set-process-group: func(pid: process-id, pgid: s32) -> result<_, process-error>;
    
    // ─────────────────────────────────────────────────────────────────────────
    // Graceful Shutdown Utilities
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Gracefully shutdown process with timeout
    /// 
    /// Requires: process:kill capability
    /// Arguments:
    ///   - pid: Process ID
    ///   - timeout-seconds: Time to wait for graceful shutdown
    /// Returns: success if shutdown completed, error otherwise
    graceful-shutdown: func(pid: process-id, timeout-seconds: u32) -> result<_, process-error>;
    
    /// Gracefully shutdown process group
    /// 
    /// Requires: process:signal capability
    /// Arguments:
    ///   - process-group-id: Process group ID
    ///   - timeout-seconds: Time to wait for graceful shutdown
    /// Returns: success if shutdown completed, error otherwise
    graceful-shutdown-group: func(process-group-id: s32, timeout-seconds: u32) -> result<_, process-error>;
    
    /// Emergency kill process (SIGKILL) with no grace period
    /// 
    /// Requires: process:kill capability
    /// Arguments:
    ///   - pid: Process ID
    /// Returns: success or error
    emergency-kill: func(pid: process-id) -> result<_, process-error>;
    
    /// Emergency kill process group
    /// 
    /// Requires: process:signal capability
    /// Arguments:
    ///   - process-group-id: Process group ID
    /// Returns: success or error
    emergency-kill-group: func(process-group-id: s32) -> result<_, process-error>;
    
    // ─────────────────────────────────────────────────────────────────────────
    // Signal Utilities
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Get signal name from signal number
    /// 
    /// Arguments:
    ///   - signal-number: Signal number
    /// Returns: signal name (e.g., "TERM", "KILL") or error
    signal-name: func(signal-number: u32) -> result<string, process-error>;
    
    /// Get signal number from signal name
    /// 
    /// Arguments:
    ///   - signal-name: Signal name (e.g., "TERM", "KILL")
    /// Returns: signal number or error
    signal-number: func(signal-name: string) -> result<u32, process-error>;
    
    /// List all supported signals
    /// 
    /// Returns: list of supported signal names
    list-signals: func() -> list<string>;
}
