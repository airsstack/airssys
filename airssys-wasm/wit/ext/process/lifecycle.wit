package airssys:ext-process@1.0.0;

// ═════════════════════════════════════════════════════════════════════════════
// PROCESS EXTENSION: LIFECYCLE OPERATIONS INTERFACE
// ═════════════════════════════════════════════════════════════════════════════
//
// This interface defines process lifecycle operations: spawn, wait, get-status,
// and resource management. It uses the `use` statement to import types from the
// local types interface, following the Component Model v0.1 pattern.

interface lifecycle {
    use types.{
        process-error,
        process-id,
        spawn-options,
        spawn-result,
        process-status,
        exit-status,
        wait-result,
        resource-limits,
    };
    
    // ─────────────────────────────────────────────────────────────────────────
    // Process Spawning
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Spawn a new child process
    /// 
    /// Requires: process:spawn capability
    /// Arguments:
    ///   - options: Process spawning options
    /// Returns: spawn result with PID or error
    spawn: func(options: spawn-options) -> result<spawn-result, process-error>;
    
    /// Spawn process with working directory
    /// 
    /// Requires: process:spawn capability
    /// Arguments:
    ///   - command: Command to execute
    ///   - arguments: Command arguments
    ///   - working-directory: Working directory for process
    /// Returns: spawn result with PID or error
    spawn-in-directory: func(command: string, arguments: list<string>, working-directory: string) -> result<spawn-result, process-error>;
    
    /// Spawn process with environment variables
    /// 
    /// Requires: process:spawn capability
    /// Arguments:
    ///   - command: Command to execute
    ///   - arguments: Command arguments
    ///   - environment: Environment variables (KEY=VALUE format)
    /// Returns: spawn result with PID or error
    spawn-with-environment: func(command: string, arguments: list<string>, environment: list<string>) -> result<spawn-result, process-error>;
    
    /// Spawn process with resource limits
    /// 
    /// Requires: process:spawn capability
    /// Arguments:
    ///   - command: Command to execute
    ///   - arguments: Command arguments
    ///   - limits: Resource limits to enforce
    /// Returns: spawn result with PID or error
    spawn-with-limits: func(command: string, arguments: list<string>, limits: resource-limits) -> result<spawn-result, process-error>;
    
    // ─────────────────────────────────────────────────────────────────────────
    // Process Waiting
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Wait for process to terminate and get exit status
    /// 
    /// Arguments:
    ///   - pid: Process ID to wait for
    /// Returns: wait result with exit status or error
    wait: func(pid: process-id) -> result<wait-result, process-error>;
    
    /// Wait for process with timeout
    /// 
    /// Arguments:
    ///   - pid: Process ID to wait for
    ///   - timeout-seconds: Maximum time to wait
    /// Returns: wait result with exit status or timeout error
    wait-with-timeout: func(pid: process-id, timeout-seconds: u32) -> result<wait-result, process-error>;
    
    /// Wait for any child process to terminate
    /// 
    /// Returns: wait result with exit status or error
    wait-any-child: func() -> result<wait-result, process-error>;
    
    /// Wait for any child process with timeout
    /// 
    /// Arguments:
    ///   - timeout-seconds: Maximum time to wait
    /// Returns: wait result with exit status or timeout error
    wait-any-child-with-timeout: func(timeout-seconds: u32) -> result<wait-result, process-error>;
    
    /// Check if process is still running without blocking
    /// 
    /// Arguments:
    ///   - pid: Process ID to check
    /// Returns: true if process is running, false if terminated or error
    is-running: func(pid: process-id) -> bool;
    
    // ─────────────────────────────────────────────────────────────────────────
    // Process Status and Information
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Get current status of a process
    /// 
    /// Arguments:
    ///   - pid: Process ID
    /// Returns: process status or error
    get-status: func(pid: process-id) -> result<process-status, process-error>;
    
    /// Get list of all child processes
    /// 
    /// Returns: list of child process IDs
    get-children: func() -> list<process-id>;
    
    /// Get parent process ID
    /// 
    /// Returns: parent process ID
    get-parent-id: func() -> process-id;
    
    /// Get current process ID
    /// 
    /// Returns: current process ID
    get-current-id: func() -> process-id;
    
    /// Get process uptime in seconds
    /// 
    /// Arguments:
    ///   - pid: Process ID
    /// Returns: uptime in seconds or error
    get-uptime: func(pid: process-id) -> result<u64, process-error>;
    
    // ─────────────────────────────────────────────────────────────────────────
    // Process Termination
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Terminate a process
    /// 
    /// Requires: process:kill capability
    /// Arguments:
    ///   - pid: Process ID to terminate
    /// Returns: success or error
    terminate: func(pid: process-id) -> result<_, process-error>;
    
    /// Kill a process forcefully
    /// 
    /// Requires: process:kill capability
    /// Arguments:
    ///   - pid: Process ID to kill
    /// Returns: success or error
    kill: func(pid: process-id) -> result<_, process-error>;
    
    // ─────────────────────────────────────────────────────────────────────────
    // Resource Management
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Set resource limits for a process
    /// 
    /// Requires: process:spawn capability
    /// Arguments:
    ///   - pid: Process ID
    ///   - limits: Resource limits to set
    /// Returns: success or error
    set-resource-limits: func(pid: process-id, limits: resource-limits) -> result<_, process-error>;
    
    /// Get current resource limits for a process
    /// 
    /// Arguments:
    ///   - pid: Process ID
    /// Returns: resource limits or error
    get-resource-limits: func(pid: process-id) -> result<resource-limits, process-error>;
    
    /// Get resource usage statistics
    /// 
    /// Arguments:
    ///   - pid: Process ID
    /// Returns: JSON string with cpu-time-ms, memory-bytes, thread-count
    get-resource-usage: func(pid: process-id) -> result<string, process-error>;
    
    /// Wait for process and clean up all resources
    /// 
    /// Arguments:
    ///   - pid: Process ID
    /// Returns: wait result or error
    join: func(pid: process-id) -> result<wait-result, process-error>;
}
