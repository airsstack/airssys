package airssys:ext-network@1.0.0;

// ═════════════════════════════════════════════════════════════════════════════
// NETWORK EXTENSION: FOUNDATION TYPES INTERFACE
// ═════════════════════════════════════════════════════════════════════════════
//
// This interface defines the core types for network operations in AirsSys WASM.
// It serves as the single source of truth for error types, address types, socket
// types, and connection metadata used across socket and connection interfaces.
//
// Note: Component Model v0.1 supports cross-interface type reuse through `use`
// statements within the same package. This enables type sharing across the
// socket.wit and connection.wit interfaces.

interface types {
    // ─────────────────────────────────────────────────────────────────────────
    // Network Operation Errors
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Comprehensive network operation error types
    variant network-error {
        /// Connection refused or connection failed
        connection-refused(string),
        /// Connection reset or broken
        connection-reset(string),
        /// Connection timed out
        connection-timeout(string),
        /// Host unreachable
        host-unreachable(string),
        /// Network unreachable
        network-unreachable(string),
        /// Invalid address or address format
        invalid-address(string),
        /// Invalid port number
        invalid-port(string),
        /// Address already in use
        address-in-use(string),
        /// Operation not permitted or not supported
        permission-denied(string),
        /// Operation would block (non-blocking mode)
        would-block(string),
        /// I/O operation failed
        io-error(string),
        /// DNS resolution failed
        dns-resolution-failed(string),
        /// Invalid hostname
        invalid-hostname(string),
        /// TLS/SSL error
        tls-error(string),
        /// Protocol error
        protocol-error(string),
        /// Resource exhausted (too many connections, etc.)
        resource-exhausted(string),
        /// Invalid argument
        invalid-argument(string),
    }
    
    // ─────────────────────────────────────────────────────────────────────────
    // Socket Types
    // ─────────────────────────────────────────────────────────────────────────
    
    /// IP address family enumeration
    enum address-family {
        ipv4,
        ipv6,
    }
    
    /// Socket type enumeration
    enum socket-type {
        tcp-stream,      // TCP-like stream socket
        udp-datagram,    // UDP-like datagram socket
    }
    
    /// Socket protocol enumeration
    enum protocol {
        tcp,
        udp,
    }
    
    /// IPv4 address (32-bit)
    type ipv4-address = tuple<u8, u8, u8, u8>;
    
    /// IPv6 address (128-bit, represented as 8 16-bit values)
    type ipv6-address = tuple<u16, u16, u16, u16, u16, u16, u16, u16>;
    
    /// Network address enumeration
    variant address {
        ipv4(ipv4-address),
        ipv6(ipv6-address),
    }
    
    /// Socket address with IP and port
    record socket-address {
        address: address,
        port: u16,
    }
    
    /// Socket handle for operations
    type socket-handle = u64;
    
    // ─────────────────────────────────────────────────────────────────────────
    // Connection Types
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Connection state enumeration
    enum connection-state {
        created,
        connecting,
        connected,
        listening,
        closing,
        closed,
        error,
    }
    
    /// Connection metadata
    record connection-info {
        /// Local socket address
        local-address: socket-address,
        /// Remote socket address
        remote-address: socket-address,
        /// Connection state
        state: connection-state,
        /// Time connection was established (seconds since Unix epoch)
        established-time: u64,
        /// Bytes sent on connection
        bytes-sent: u64,
        /// Bytes received on connection
        bytes-received: u64,
    }
    
    // ─────────────────────────────────────────────────────────────────────────
    // Socket Options
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Socket configuration options
    record socket-options {
        /// Enable address reuse
        reuse-address: bool,
        /// Enable port reuse
        reuse-port: bool,
        /// TCP no-delay option (disable Nagle algorithm)
        tcp-no-delay: bool,
        /// TCP keep-alive enabled
        tcp-keep-alive: bool,
        /// Keep-alive interval in seconds
        keep-alive-interval: u32,
        /// Send buffer size in bytes
        send-buffer-size: u32,
        /// Receive buffer size in bytes
        receive-buffer-size: u32,
        /// Connection timeout in seconds
        connect-timeout: u32,
        /// Read timeout in seconds
        read-timeout: u32,
        /// Write timeout in seconds
        write-timeout: u32,
        /// Enable non-blocking mode
        non-blocking: bool,
    }
    
    // ─────────────────────────────────────────────────────────────────────────
    // Data Transfer Types
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Send result containing bytes sent
    record send-result {
        /// Number of bytes sent
        bytes-sent: u32,
    }
    
    /// Receive result containing data and sender info
    record receive-result {
        /// Received data
        data: list<u8>,
        /// Number of bytes received
        bytes-received: u32,
        /// Sender address (for datagram sockets)
        sender-address: option<socket-address>,
    }
    
    // ─────────────────────────────────────────────────────────────────────────
    // DNS Resolution Types
    // ─────────────────────────────────────────────────────────────────────────
    
    /// DNS resolution result
    record address-info {
        /// Resolved address
        address: address,
        /// Port number
        port: u16,
        /// Socket type
        socket-type: socket-type,
        /// Protocol
        protocol: protocol,
    }
    
    /// DNS resolution result for hostname
    record hostname-resolution {
        /// Queried hostname
        hostname: string,
        /// List of resolved addresses
        addresses: list<address-info>,
        /// Time to live for resolution in seconds
        ttl: u32,
    }
}
