package airssys:ext-network@1.0.0;

// ═════════════════════════════════════════════════════════════════════════════
// NETWORK EXTENSION: CONNECTION OPERATIONS INTERFACE
// ═════════════════════════════════════════════════════════════════════════════
//
// This interface defines higher-level connection operations: connect, connection
// pooling, DNS resolution, and TLS. It uses the `use` statement to import types
// from the local types interface, enabling clean type dependency management.

interface connection {
    use types.{
        network-error,
        socket-address,
        socket-handle,
        connection-info,
        address-info,
        hostname-resolution,
    };
    
    // ─────────────────────────────────────────────────────────────────────────
    // Connection Establishment
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Connect socket to remote address
    /// 
    /// Requires: network:outbound capability
    /// Arguments:
    ///   - handle: Socket handle
    ///   - address: Remote address to connect to
    /// Returns: success or error
    connect: func(handle: socket-handle, address: socket-address) -> result<_, network-error>;
    
    /// Connect socket with retry logic for resilience
    /// 
    /// Requires: network:outbound capability
    /// Arguments:
    ///   - handle: Socket handle
    ///   - address: Remote address to connect to
    ///   - max-retries: Maximum number of retry attempts
    ///   - retry-delay-ms: Delay between retries in milliseconds
    /// Returns: success or error
    connect-with-retry: func(handle: socket-handle, address: socket-address, max-retries: u32, retry-delay-ms: u32) -> result<_, network-error>;
    
    // ─────────────────────────────────────────────────────────────────────────
    // DNS Resolution
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Resolve hostname to addresses
    /// 
    /// Requires: network:outbound capability
    /// Arguments:
    ///   - hostname: Hostname to resolve
    /// Returns: hostname resolution result or error
    resolve-hostname: func(hostname: string) -> result<hostname-resolution, network-error>;
    
    /// Resolve hostname to single address
    /// 
    /// Requires: network:outbound capability
    /// Arguments:
    ///   - hostname: Hostname to resolve
    /// Returns: first resolved address or error
    resolve-hostname-single: func(hostname: string) -> result<address-info, network-error>;
    
    /// Perform reverse DNS lookup
    /// 
    /// Arguments:
    ///   - address: IP address to reverse lookup
    /// Returns: hostname or error
    reverse-lookup: func(address: string) -> result<string, network-error>;
    
    // ─────────────────────────────────────────────────────────────────────────
    // Connection Information
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Get detailed connection information
    /// 
    /// Arguments:
    ///   - handle: Socket handle
    /// Returns: connection info or error
    get-connection-info: func(handle: socket-handle) -> result<connection-info, network-error>;
    
    /// Check if connection is still active
    /// 
    /// Arguments:
    ///   - handle: Socket handle
    /// Returns: true if connected and healthy, false otherwise
    is-connected: func(handle: socket-handle) -> bool;
    
    // ─────────────────────────────────────────────────────────────────────────
    // Connection Pooling
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Connection pool handle for managing multiple connections
    type connection-pool-handle = u64;
    
    /// Create a connection pool
    /// 
    /// Arguments:
    ///   - max-connections: Maximum connections in pool
    ///   - connect-timeout-ms: Timeout for establishing new connections
    /// Returns: pool handle or error
    create-pool: func(max-connections: u32, connect-timeout-ms: u32) -> result<connection-pool-handle, network-error>;
    
    /// Get connection from pool or create new one
    /// 
    /// Arguments:
    ///   - pool: Pool handle
    ///   - address: Remote address to connect to
    /// Returns: socket handle or error
    pool-acquire: func(pool: connection-pool-handle, address: socket-address) -> result<socket-handle, network-error>;
    
    /// Return connection to pool
    /// 
    /// Arguments:
    ///   - pool: Pool handle
    ///   - handle: Socket handle to return
    /// Returns: success or error
    pool-release: func(pool: connection-pool-handle, handle: socket-handle) -> result<_, network-error>;
    
    /// Close connection pool and all connections
    /// 
    /// Arguments:
    ///   - pool: Pool handle to close
    /// Returns: success or error
    close-pool: func(pool: connection-pool-handle) -> result<_, network-error>;
    
    // ─────────────────────────────────────────────────────────────────────────
    // TLS/SSL Support
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Upgrade socket to TLS connection
    /// 
    /// Requires: network capability and TLS certificate access
    /// Arguments:
    ///   - handle: Connected socket handle
    ///   - hostname: Server hostname for certificate verification
    ///   - verify-certificate: Whether to verify server certificate
    /// Returns: success or error
    upgrade-to-tls: func(handle: socket-handle, hostname: string, verify-certificate: bool) -> result<_, network-error>;
    
    /// Get TLS connection info
    /// 
    /// Arguments:
    ///   - handle: TLS socket handle
    /// Returns: TLS info (protocol version, cipher suite) or error
    get-tls-info: func(handle: socket-handle) -> result<string, network-error>;
    
    // ─────────────────────────────────────────────────────────────────────────
    // Advanced Connection Features
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Set connection idle timeout (seconds without data triggers close)
    /// 
    /// Arguments:
    ///   - handle: Socket handle
    ///   - timeout-seconds: Idle timeout duration
    /// Returns: success or error
    set-idle-timeout: func(handle: socket-handle, timeout-seconds: u32) -> result<_, network-error>;
    
    /// Enable connection keep-alive with periodic pings
    /// 
    /// Arguments:
    ///   - handle: Socket handle
    ///   - interval-seconds: Interval between keep-alive pings
    /// Returns: success or error
    enable-keep-alive: func(handle: socket-handle, interval-seconds: u32) -> result<_, network-error>;
    
    /// Get connection statistics
    /// 
    /// Arguments:
    ///   - handle: Socket handle
    /// Returns: statistics as JSON string containing bytes-sent, bytes-received, uptime-ms
    get-connection-stats: func(handle: socket-handle) -> result<string, network-error>;
}
