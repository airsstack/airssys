package airssys:ext-filesystem@1.0.0;

// ═════════════════════════════════════════════════════════════════════════════
// FILESYSTEM EXTENSION: CORE OPERATIONS INTERFACE
// ═════════════════════════════════════════════════════════════════════════════
//
// This interface defines the core filesystem operations: open, read, write, close,
// delete, and list directory operations. It uses the `use` statement to import
// types from the local types interface, following the Component Model v0.1 pattern.

interface filesystem {
    use types.{
        filesystem-error,
        path,
        file-type,
        file-permissions,
        file-metadata,
        directory-entry,
        open-mode,
        file-open-options,
        file-handle,
        read-result,
        write-result,
    };
    
    // ─────────────────────────────────────────────────────────────────────────
    // File Access Operations
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Open a file and return a file handle for operations
    /// 
    /// Requires: filesystem:read or filesystem:write capability depending on mode
    /// Arguments:
    ///   - path: Path to file to open
    ///   - options: Open options (mode, create, truncate, etc.)
    /// Returns: file handle or error
    open: func(path: path, options: file-open-options) -> result<file-handle, filesystem-error>;
    
    /// Close a file handle and release associated resources
    /// 
    /// Arguments:
    ///   - handle: File handle to close
    /// Returns: success or error
    close: func(handle: file-handle) -> result<_, filesystem-error>;
    
    /// Read up to max-bytes from file at current position
    /// 
    /// Requires: filesystem:read capability
    /// Arguments:
    ///   - handle: File handle
    ///   - max-bytes: Maximum bytes to read
    /// Returns: read result with data and bytes-read or error
    read: func(handle: file-handle, max-bytes: u32) -> result<read-result, filesystem-error>;
    
    /// Write data to file at current position
    /// 
    /// Requires: filesystem:write capability
    /// Arguments:
    ///   - handle: File handle
    ///   - data: Data to write
    /// Returns: write result with bytes-written or error
    write: func(handle: file-handle, data: list<u8>) -> result<write-result, filesystem-error>;
    
    /// Seek to absolute position in file
    /// 
    /// Arguments:
    ///   - handle: File handle
    ///   - position: Absolute byte position to seek to
    /// Returns: new position or error
    seek: func(handle: file-handle, position: u64) -> result<u64, filesystem-error>;
    
    /// Get current position in file
    /// 
    /// Arguments:
    ///   - handle: File handle
    /// Returns: current byte position or error
    tell: func(handle: file-handle) -> result<u64, filesystem-error>;
    
    // ─────────────────────────────────────────────────────────────────────────
    // File Management Operations
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Delete a file
    /// 
    /// Requires: filesystem:delete capability
    /// Arguments:
    ///   - path: Path to file to delete
    /// Returns: success or error
    delete-file: func(path: path) -> result<_, filesystem-error>;
    
    /// Create a new directory
    /// 
    /// Requires: filesystem:write capability
    /// Arguments:
    ///   - path: Path where directory should be created
    ///   - permissions: Directory permissions
    /// Returns: success or error
    create-directory: func(path: path, permissions: file-permissions) -> result<_, filesystem-error>;
    
    /// Remove an empty directory
    /// 
    /// Requires: filesystem:delete capability
    /// Arguments:
    ///   - path: Path to directory to remove
    /// Returns: success or error
    remove-directory: func(path: path) -> result<_, filesystem-error>;
    
    /// Remove a directory and all its contents recursively
    /// 
    /// Requires: filesystem:delete capability
    /// Arguments:
    ///   - path: Path to directory tree to remove
    /// Returns: success or error
    remove-directory-recursive: func(path: path) -> result<_, filesystem-error>;
    
    /// Rename or move a file or directory
    /// 
    /// Requires: filesystem:write and filesystem:delete capabilities
    /// Arguments:
    ///   - old-path: Current path
    ///   - new-path: New path
    /// Returns: success or error
    rename: func(old-path: path, new-path: path) -> result<_, filesystem-error>;
    
    /// Copy a file from source to destination
    /// 
    /// Requires: filesystem:read and filesystem:write capabilities
    /// Arguments:
    ///   - src: Source file path
    ///   - dest: Destination file path
    /// Returns: success or error
    copy: func(src: path, dest: path) -> result<_, filesystem-error>;
    
    // ─────────────────────────────────────────────────────────────────────────
    // File Info Operations
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Check if path exists
    /// 
    /// Arguments:
    ///   - path: Path to check
    /// Returns: true if exists, false otherwise
    exists: func(path: path) -> bool;
    
    /// Get metadata about a file or directory
    /// 
    /// Requires: filesystem:read capability
    /// Arguments:
    ///   - path: Path to get metadata for
    /// Returns: metadata or error
    get-metadata: func(path: path) -> result<file-metadata, filesystem-error>;
    
    /// Change file permissions
    /// 
    /// Requires: filesystem:write capability
    /// Arguments:
    ///   - path: Path to file/directory
    ///   - permissions: New permissions
    /// Returns: success or error
    set-permissions: func(path: path, permissions: file-permissions) -> result<_, filesystem-error>;
    
    /// Create a symbolic link
    /// 
    /// Requires: filesystem:write capability
    /// Arguments:
    ///   - target: Target path for symlink
    ///   - link-path: Path where symlink should be created
    /// Returns: success or error
    create-symlink: func(target: path, link-path: path) -> result<_, filesystem-error>;
    
    /// Read contents of a symbolic link
    /// 
    /// Requires: filesystem:read capability
    /// Arguments:
    ///   - path: Path to symlink
    /// Returns: target path or error
    read-symlink: func(path: path) -> result<path, filesystem-error>;
}
