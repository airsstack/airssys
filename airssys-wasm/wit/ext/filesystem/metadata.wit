package airssys:ext-filesystem@1.0.0;

// ═════════════════════════════════════════════════════════════════════════════
// FILESYSTEM EXTENSION: METADATA OPERATIONS INTERFACE
// ═════════════════════════════════════════════════════════════════════════════
//
// This interface defines metadata and directory listing operations. It uses the
// `use` statement to import types from the local types interface, enabling
// clean type dependency management within the ext-filesystem package.

interface metadata {
    use types.{
        filesystem-error,
        path,
        file-type,
        file-metadata,
        directory-entry,
        directory-listing,
    };
    
    // ─────────────────────────────────────────────────────────────────────────
    // Directory Listing Operations
    // ─────────────────────────────────────────────────────────────────────────
    
    /// List contents of a directory
    /// 
    /// Requires: filesystem:list-dir capability
    /// Arguments:
    ///   - path: Path to directory to list
    /// Returns: directory listing or error
    list-directory: func(path: path) -> result<directory-listing, filesystem-error>;
    
    /// List directory contents recursively up to specified depth
    /// 
    /// Requires: filesystem:list-dir capability
    /// Arguments:
    ///   - path: Root directory path
    ///   - max-depth: Maximum directory depth to traverse (0 = current only)
    /// Returns: list of all entries found or error
    list-recursive: func(path: path, max-depth: u32) -> result<list<directory-entry>, filesystem-error>;
    
    // ─────────────────────────────────────────────────────────────────────────
    // File Search and Filter Operations
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Find files matching a glob pattern in directory tree
    /// 
    /// Requires: filesystem:list-dir capability
    /// Arguments:
    ///   - directory: Root directory to search from
    ///   - pattern: Glob pattern to match (e.g., "*.txt", "src/**/*.rs")
    /// Returns: list of matching file paths or error
    find-files: func(directory: path, pattern: string) -> result<list<path>, filesystem-error>;
    
    /// Find all files of specific type in directory tree
    /// 
    /// Requires: filesystem:list-dir capability
    /// Arguments:
    ///   - directory: Root directory to search from
    ///   - file-type: Type of files to find
    /// Returns: list of matching file paths or error
    find-by-type: func(directory: path, file-type: file-type) -> result<list<path>, filesystem-error>;
    
    /// Get total size of directory and all contents
    /// 
    /// Requires: filesystem:list-dir and filesystem:read capabilities
    /// Arguments:
    ///   - path: Directory path
    /// Returns: total size in bytes or error
    directory-size: func(path: path) -> result<u64, filesystem-error>;
    
    // ─────────────────────────────────────────────────────────────────────────
    // File Comparison Operations
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Check if two file paths refer to the same file (handles symlinks)
    /// 
    /// Requires: filesystem:read capability
    /// Arguments:
    ///   - path1: First path
    ///   - path2: Second path
    /// Returns: true if paths refer to same file or error
    same-file: func(path1: path, path2: path) -> result<bool, filesystem-error>;
    
    /// Get canonical absolute path, resolving symlinks and relative components
    /// 
    /// Requires: filesystem:read capability
    /// Arguments:
    ///   - path: Path to canonicalize
    /// Returns: absolute canonical path or error
    canonical-path: func(path: path) -> result<path, filesystem-error>;
    
    // ─────────────────────────────────────────────────────────────────────────
    // Metadata Batch Operations
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Get metadata for multiple files efficiently
    /// 
    /// Requires: filesystem:read capability
    /// Arguments:
    ///   - paths: List of paths to get metadata for
    /// Returns: list of metadata records or first error encountered
    batch-metadata: func(paths: list<path>) -> result<list<file-metadata>, filesystem-error>;
    
    /// Check if all provided files exist
    /// 
    /// Arguments:
    ///   - paths: List of paths to check
    /// Returns: true if all exist, false otherwise
    all-exist: func(paths: list<path>) -> bool;
    
    /// Check if any of provided files exist
    /// 
    /// Arguments:
    ///   - paths: List of paths to check
    /// Returns: true if any exist, false otherwise
    any-exist: func(paths: list<path>) -> bool;
    
    // ─────────────────────────────────────────────────────────────────────────
    // Timestamp Operations
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Set file access and modification times
    /// 
    /// Requires: filesystem:write capability
    /// Arguments:
    ///   - path: File path
    ///   - accessed-time: New access time (seconds since Unix epoch)
    ///   - modified-time: New modification time (seconds since Unix epoch)
    /// Returns: success or error
    set-times: func(path: path, accessed-time: u64, modified-time: u64) -> result<_, filesystem-error>;
    
    // ─────────────────────────────────────────────────────────────────────────
    // Filesystem Utility Operations
    // ─────────────────────────────────────────────────────────────────────────
    
    /// Get working directory path
    /// 
    /// Returns: current working directory path or error
    get-working-directory: func() -> result<path, filesystem-error>;
    
    /// Change working directory
    /// 
    /// Arguments:
    ///   - path: Path to change to
    /// Returns: success or error
    set-working-directory: func(path: path) -> result<_, filesystem-error>;
}
